import numpy as np
from pyLCIO import IOIMPL, EVENT, IMPL, ROOT, IOException

import constants

class Histograms:
    def __init__(self):
		
        # track efficiency
        self.trackEffVsR_true = ROOT.TH1F('trackEffVsR_true', 'True vertices', constants.NBINS, 0., constants.TPC_R_MAX)
        self.trackEffVsR_reco = ROOT.TH1F('trackEffVsR_reco', 'N matching reco. tracks', constants.NBINS, 0., constants.TPC_R_MAX)
        self.trackEffVsL_true = ROOT.TH1F('trackEffVsL_true', 'True vertices', 30, 0., 3000.)
        self.trackEffVsL_reco = ROOT.TH1F('trackEffVsL_reco', 'N matching reco. tracks', 30, 0., 3000.)
		
        # 2-D track efficiency
        self.trackEffRVsZ_true = ROOT.TH2F('trackEffRVsZ_true', 'True vertices', constants.NBINS, -constants.TPC_Z_MAX, constants.TPC_Z_MAX, constants.NBINS, 0., constants.TPC_R_MAX)
        self.trackEffRVsZ_reco = ROOT.TH2F('trackEffRVsZ_reco', 'N matching reco. tracks', constants.NBINS, -constants.TPC_Z_MAX, constants.TPC_Z_MAX, constants.NBINS, 0., constants.TPC_R_MAX)
        self.trackEffiPvsTheta_true = ROOT.TH2F('trackEffiPvsTheta_true', '', 3, 0., 3.15, 15, 0., 15.)
        self.trackEffiPvsTheta_reco = ROOT.TH2F('trackEffiPvsTheta_reco', '', 3, 0., 3.15, 15, 0., 15.)
        self.trackEffiPvsR_true = ROOT.TH2F('trackEffiPvsR_true', '', 15, 0., 15., constants.NBINS, 0., constants.TPC_R_MAX)

        # first two hits distances
        self.d12vsTheta_reco = ROOT.TH2F('d12vsTheta_reco', '', 32, 0., 3.15, 32, 0., 150.)
        self.d12vsTheta_true = ROOT.TH2F('d12vsTheta_true', '', 32, 0., 3.15, 32, 0., 150.)
        self.d12vsDeltaPhi_true = ROOT.TH2F('d12vsDeltaPhi_true', '', 32, 0., 3.15, 32, 0., 150.)
        #self.d12vsDeltaPhi_reco = ROOT.TH2F('d12vsDeltaPhi_reco', '', 32, 0., 3.15, 32, 0., 100.)

        # track eff. vs p, pT, theta
        self.momTrack_true = ROOT.TH1F('momTrack_true', 'True momentum of track', 50, 0., 50.)
        self.momTrack_reco = ROOT.TH1F('momTrack_reco', 'True momentum of reco. track', 50, 0., 50.)
        self.ptTrack_true = ROOT.TH1F('ptTrack_true', 'True pT of track', 50, 0., 15.)
        self.ptTrack_reco = ROOT.TH1F('ptTrack_reco', 'True pT of reco. track', 50, 0., 15.)
        self.thetaTrack_true = ROOT.TH1F('thetaTrack_true', 'True polar angle of track', 42, 0., 3.15)
        self.thetaTrack_reco = ROOT.TH1F('thetaTrack_reco', 'True polar angle of reco. track', 42, 0., 3.15)

        # track eff. vs decay angle
        self.DeltaThetaTrackLLP_true = ROOT.TH1F('DeltaThetaTrackLLP_true', 'Dist. between polar angles of track and LLP', 35, 0., 3.5)
        self.DeltaThetaTrackLLP_reco = ROOT.TH1F('DeltaThetaTrackLLP_reco', 'Dist. between polar angles of track and LLP', 35, 0., 3.5)
        self.DeltaPhiTrackLLP_true = ROOT.TH1F('DeltaPhiTrackLLP_true', 'Dist. between azimuthal angles of track and LLP', 35, 0., 3.5)
        self.DeltaPhiTrackLLP_reco = ROOT.TH1F('DeltaPhiTrackLLP_reco', 'Dist. between azimuthal angles of track and LLP', 35, 0., 3.5)
        self.DeltaAlphaTrackLLP_true = ROOT.TH1F('DeltaAlphaTrackLLP_true', 'Angle between track and LLP', 35, 0., 3.5)
        self.DeltaAlphaTrackLLP_reco = ROOT.TH1F('DeltaAlphaTrackLLP_reco', 'Angle between track and LLP', 35, 0., 3.5)

        # LLP momentum and theta
        self.momLLP_true = ROOT.TH1F('momLLP_true', 'True momentum of LLP', 50, 0., 300.)
        self.momLLP_reco = ROOT.TH1F('momLLP_reco', 'True momentum of reco. LLP', 50, 0., 300.)
        self.thetaLLP_true = ROOT.TH1F('thetaLLP_true', 'True polar angle of LLP', 42, 0., 3.15)
        self.thetaLLP_reco = ROOT.TH1F('thetaLLP_reco', 'True polar angle of reco. LLP', 42, 0., 3.15)

        # track reco. features
        self.h_nTracks = ROOT.TH1F('h_nTracks', 'Number of tracks', 20, 0., 20.)
        self.h_relWeights = ROOT.TH1F('h_relWeights', 'Number of weights', 50, 0., 2.)
        self.h_angDist = ROOT.TH1F('h_angDist', 'Angular separation', 70, 0., 7)
        self.siTrackD0 = ROOT.TH1F('siTrackD0', 'd_{0} of Si track', 50, 0., 500)        
        self.siTrackZ0 = ROOT.TH1F('siTrackZ0', 'z_{0} of Si track', 50, 0., 2500)        

        # vertex reconstruction
        self.vtxMisdistances = ROOT.TH1F('vtxMisdistances', 'Distance between true and reco. vertex', 50, 0., 200)
        self.hitsDistances = ROOT.TH1F('hitsDistances', 'Distance between two closest first/last hits', 200, 0., 800)
        self.helixDistances = ROOT.TH1F('helixDistances', 'Distance between helices for a vertex', 50, 0., 25)
        self.vtxMultiplicity = ROOT.TH1F('vtxMultiplicity', 'Reco. vertex multiplicity', 10, 0., 10)

        # vertex reco. eff.
        self.vtxEffVsL_true = ROOT.TH1F('vtxEffVsL_true', 'True vertices', 30, 0., 3000.)
        self.vtxEffVsL_reco = ROOT.TH1F('vtxEffVsL_reco', 'N matching reco. vertices', 30, 0., 3000.)
        self.vtxEffVsR_true = ROOT.TH1F('vtxEffVsR_true', 'True vertices', 30, 0., 3000.)
        self.vtxEffVsR_reco = ROOT.TH1F('vtxEffVsR_reco', 'N matching reco. vertices', 30, 0., 3000.)
        self.vtxVsR_reco = ROOT.TH1F('vtxVsR_reco', 'Reco. vertices', 100, 0., 2000.)
        self.vtxVsL_reco = ROOT.TH1F('vtxVsL_reco', 'Reco. vertices', 30, 0., 3000.)

        logx = np.logspace(-1.0, 3.7, num=51)
        logx2 = np.logspace(-1.0, 3.5, num=51)
        logx3 = np.logspace(-2.0, 1.18, num=51)
		
        # 2-D vertices plots
        self.recoVertices = ROOT.TH2F('recoVertices', 'Number of found vertices', constants.NBINS, -constants.TPC_Z_MAX, constants.TPC_Z_MAX, constants.NBINS, 0., constants.TPC_R_MAX)
        self.fakeVertices = ROOT.TH2F('fakeVertices', 'Vertices not matched to MC', constants.NBINS, -constants.TPC_Z_MAX, constants.TPC_Z_MAX, constants.NBINS, 0., constants.TPC_R_MAX)
        self.vtxEffRVsZ_true = ROOT.TH2F('vtxEffRVsZ_true', 'True vertices', constants.NBINS, -constants.TPC_Z_MAX, constants.TPC_Z_MAX, constants.NBINS, 0., constants.TPC_R_MAX)
        self.vtxEffRVsZ_reco = ROOT.TH2F('vtxEffRVsZ_reco', 'True vtx corresponding to reco. vtx', constants.NBINS, -constants.TPC_Z_MAX, constants.TPC_Z_MAX, constants.NBINS, 0., constants.TPC_R_MAX)
        self.vtxPt1vsPt2 = ROOT.TH2F('vtxPt1vsPt2', 'pT of tracks at reco. vtx', 40, 0.0, 130.0, 40, 0.0, 130.0)
        self.vtxP1vsP2 = ROOT.TH2F('vtxP1vsP2', 'p of tracks at reco. vtx', 40, 0.0, 4.0, 40, 0.0, 4.0)
        self.vtxPz1vsPz2 = ROOT.TH2F('vtxPz1vsPz2', 'p_{z} of tracks at reco. vtx', 40, -4.0, 4.0, 40, -4.0, 4.0)
        self.vtxOmega1vsOmega2 = ROOT.TH2F('vtxOmega1vsOmega2', '#Omega of tracks at reco. vtx', 40, 0.0, 0.02, 40, 0.0, 0.02)
        self.vtxRefPointDist1VsDist2 = ROOT.TH2F('vtxRefPointDist1VsDist2', 'Distance of ref. points from reco. vtx', 50, 0., 2000., 50, 0., 2000.)
        self.vtxTrksNdf1VsNdf2 = ROOT.TH2F('vtxTrksNdf1VsNdf2', 'N_{df} for tracks at reco. vtx', 50, 0, 500, 50, 0, 500)
        self.vtxTrksPtVsNdf = ROOT.TH2F('vtxTrksPtVsNdf', 'p_{T} and N_{df} for tracks at reco. vtx', 50, 0, 15, 50, 0, 500)
        self.tracksVtxPvsTheta = ROOT.TH2F('tracksVtxPvsTheta', '', 16, 0., 3.15, 50, 0., 130.)
        self.tracksVtxPtVsTheta = ROOT.TH2F('tracksVtxPtVsTheta', '', 16, 0., 3.15, 50, 0., 130.)
        self.vtxTrksD01VsD02 = ROOT.TH2F('vtxTrksD01VsD02', 'd_{0} (w.r.t. IP) of tracks in vtx', 50, 0, 2000, 50, 0, 2000)
        self.vtxTrksZ01VsZ02 = ROOT.TH2F('vtxTrksZ01VsZ02', 'z_{0} (w.r.t. IP) of tracks in vtx', 50, 0, 2500, 50, 0, 2500)
        self.vtxTrksCentresRefPointsDist = ROOT.TH2F('vtxTrksCentresRefPointsDist', '', 50, logx, 50, 0, 5000)
        self.vtxTrksCentresRefPointsDist_scaled = ROOT.TH2F('vtxTrksCentresRefPointsDist_scaled', '', 50, logx, 50, 0, 5000)
        self.vtxRefPointDistsVsCentres = ROOT.TH2F('vtxRefPointDistsVsCentres', 'Distance of ref. points from reco. vtx vs. distance between circle centres', 50, logx2, 50, 0., 5000.)
        self.corrCentresRefDistsVsPt = ROOT.TH2F('corrCentresRefDistsVsPt', '', 50, -9000, 3000, 50, 0, 15)
        self.corrCentresRefDistsVsPtLog = ROOT.TH2F('corrCentresRefDistsVsPtLog', '', 50, -9000, 3000, 50, logx3)
        self.corrLogCentresRefDistsVsPt = ROOT.TH2F('corrLogCentresRefDistsVsPt', '', 50, -15000, 3000, 50, 0, 15)
        self.corrCentresRefDistsVsR = ROOT.TH2F('corrCentresRefDistsVsR', '', 50, -3000, 3000, 50, 0, 2000)
        self.cosOpenAngleVsCurvRatio = ROOT.TH2F('cosOpenAngleVsCurvRatio', '', 50, -1, 1, 50, 0., 1.)
        self.vtxRefPhiVsLhPhi = ROOT.TH2F('vtxRefPhiVsLhPhi', 'Ref. point and last hit phi w.r.t. vtx phi', 50, -0.2, 0.2, 50, -0.2, 0.2)
        self.vtxRefPhiVsArcPhi = ROOT.TH2F('vtxRefPhiVsArcPhi', 'Phi from vtx to ref. pt. vs. arc phi', 50, -6.3, 6.3, 50, 0, 7)
        self.vtxRefZVsLhZ = ROOT.TH2F('vtxRefZVsLhZ', 'Vtx dist. in z from ref. pt. and last hit', 50, -0.5, 1, 50, -1, 1)
        self.vtxRefZVsLenZ = ROOT.TH2F('vtxRefZVsLenZ', 'Vtx dist. from ref. pt. and trk len. in z', 50, -1.0, 1, 50, logx)
        self.vtxIso = ROOT.TH2F('vtxIso', 'Momentum of tracks at vertex and cone around them', 50, 0, 15, 200, 0, 20)

		
        # tracks assoc. to vertex
        self.vtxTracksTheta = ROOT.TH1F('vtxTracksTheta', 'Theta of the tracks assoc. to good vertex', 42, 0., 3.15)
        self.vtxTracksPhi = ROOT.TH1F('vtxTracksPhi', 'Phi of the tracks assoc. to good vertex', 84, -3.15, 3.15)
        self.vtxTheta = ROOT.TH1F('vtxTheta', 'Reco. theta of the dilepton system', 42, 0., 3.15)
        self.vtxPhi = ROOT.TH1F('vtxPhi', 'Reco. phi of the dilepton system', 84, -3.15, 3.15)
        self.vtxTracksPt = ROOT.TH1F('vtxTracksPt', 'pT of tracks assoc. to good vertex', 50, 0., 130.)
        self.vtxTracksPtSum = ROOT.TH1F('vtxTracksPtSum', 'pT sum of tracks assoc. to good vertex', 30, 0., 130.)
        self.vtxTracksP = ROOT.TH1F('vtxTracksP', 'Momentum of tracks assoc. to good vertex', 50, 0., 15.)
        self.vtxPt = ROOT.TH1F('vtxPt', 'pT of the dilepton system', 50, 0., 130.)
        self.vtxP = ROOT.TH1F('vtxP', 'Momentum of the dilepton system', 50, 0., 130.)
        self.vtxEffVsPt_true = ROOT.TH1F('vtxEffVsPt_true', 'pT of the dilepton system', 50, 0., 130.)
        self.vtxEffVsPt_reco = ROOT.TH1F('vtxEffVsPt_reco', 'pT of the dilepton system', 50, 0., 130.)
        self.vtxEffVsP_true = ROOT.TH1F('vtxEffVsP_true', 'Momentum of the dilepton system', 50, 0., 130.)
        self.vtxEffVsP_reco = ROOT.TH1F('vtxEffVsP_reco', 'Momentum of the dilepton system', 50, 0., 130.)
        self.vtxRefPointDist = ROOT.TH1F('vtxRefPointDist', 'Distance between vtx and track ref. point', 60, 0., 300.)
        self.vtxTrksRefPointsDist = ROOT.TH1F('vtxTrksRefPointsDist', 'Distance between track ref. points in vtx', 80, 0., 2000.)
        self.vtxTrksCurvRatio = ROOT.TH1F('vtxTrksCurvRatio', 'Ratio of the two track curvature', 50, 0., 1.)
        self.vtxTrksOmega = ROOT.TH1F('vtxTrksOmega', '#Omega param. of tracks in vtx', 50, 0, 0.04)
        self.vtxTrksRefPointZ = ROOT.TH1F('vtxTrksRefPointZ', 'Distance in z for tracks in vtx', 50, -1.0, 3.7) # crashes with logscale????
        self.vtxTrksChi2 = ROOT.TH1F('vtxTrksChi2', '#chi^{2} of tracks in vtx', 20, 0, 40)
        self.vtxTrksChi2Ndf = ROOT.TH1F('vtxTrksChi2Ndf', '#chi^{2}/N_{df} of tracks in vtx', 50, 0, 20)
        self.vtxTrksNdf = ROOT.TH1F('vtxTrksNdf', 'N_{df} of tracks in vtx', 50, 0, 500)
        self.vtxTrksD0 = ROOT.TH1F('vtxTrksD0', 'd_{0} of tracks in vtx', 50, 0, 50)
        self.vtxTrksZ0 = ROOT.TH1F('vtxTrksZ0', 'z_{0} of tracks in vtx', 50, 0, 50)
        self.vtxTrksD0AtIP = ROOT.TH1F('vtxTrksD0AtIP', 'd_{0} (w.r.t. IP) of tracks in vtx', 50, 0, 25)
        self.vtxTrksZ0AtIP = ROOT.TH1F('vtxTrksZ0AtIP', 'z_{0} (w.r.t. IP) of tracks in vtx', 50, 0, 25)
        self.vtxTrksTruePDG = ROOT.TH1F('vtxTrksTruePDG', 'PDG of tracks in vtx', 212, 0, 212)
        self.vtxTrksAreBothCurlers = ROOT.TH1F('vtxTrksAreBothCurlers', '1 if both tracks in vtx are curlers', 2, 0, 2)
        self.vtxTrksCentresDist = ROOT.TH1F('vtxTrksCentresDist', 'Distance between helix circle centres', 50, 0, 5000)
        self.vtxTrksLogCentresRefDists = ROOT.TH1F('vtxTrksLogCentresRefDists', '', 50, -4000, 3000)
        self.vtxConeP = ROOT.TH1F('vtxConeP', '', 200, 0, 20)

        # vertex angular analysis
        self.cosOpenAngleVtx_true = ROOT.TH1F('cosOpenAngleVtx_true', 'MC track opening angle at vtx', 200, 0.98, 1)
        self.cosOpenAngleVtx_reco = ROOT.TH1F('cosOpenAngleVtx_reco', 'MC track opening angle at a good vtx', 200, 0.98, 1)
        self.cosOpenAngleVsRefPtDist_true = ROOT.TH2F('cosOpenAngleVsRefPtDist_true', '', 50, 0.998, 1, 50, 0., 500.)
        self.cosOpenAngleVsRefPtDist_reco = ROOT.TH2F('cosOpenAngleVsRefPtDist_reco', '', 50, 0.998, 1, 50, 0., 500.)
		
        # invariant mass distributions
        self.ee_hypo_mass = ROOT.TH1F('ee_hypo_mass', 'M_{inv} assuming tracks are electrons', 150, 0, 3)
        self.pipi_hypo_mass = ROOT.TH1F('pipi_hypo_mass', 'M_{inv} assuming tracks are pions', 150, 0, 3)
        self.lambda_mass_diff = ROOT.TH1F('lambda_mass_diff', 'M_{inv} assuming tracks are proton and pion', 100, 0, 2)
        self.lambda_hypo_mass = ROOT.TH2F('lambda_hypo_mass', 'M_{inv} assuming tracks are proton and pion', 400, 0, 4, 400, 0, 4)
        self.ee_mass_vs_R = ROOT.TH2F('ee_mass_vs_R', 'M_{inv} vs. vtx. radius assuming tracks are electrons', 25, 0, 4, 25, 300, 1800)
        self.pipi_mass_vs_R = ROOT.TH2F('pipi_mass_vs_R', 'M_{inv} vs. vtx. radius assuming tracks are pions', 25, 0, 4, 25, 300, 1800)
		

    def print_histos(self, cat, fs, scenario):

        ROOT.gStyle.SetOptStat(0)

        c0=ROOT.TCanvas('c0', 'c0', 600, 400)

        trackEffVsR = ROOT.TH1F('trackEffVsR', 'Track reconstruction efficiency', constants.NBINS, 0., constants.TPC_R_MAX)
        trackEffVsR.SetXTitle('True vertex distance from beam axis')
        trackEffVsR.SetYTitle('Track reco. efficiency')
        trackEffVsR.Divide(self.trackEffVsR_reco, self.trackEffVsR_true,1,1,"cl=0.683 b(1,1) mode")
        trackEffVsR.SetMarkerStyle(20)
        trackEffVsR.SetMarkerSize(0.5)
        trackEffVsR.Draw('e')
        c0.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/trackEffVsR_'+fs+'.pdf')

        trackEffVsL = ROOT.TH1F('trackEffVsL', 'Track reconstruction efficiency', 30, 0., 3000.)
        trackEffVsL.SetXTitle('#beta c t_{LLP} [mm]')
        trackEffVsL.SetYTitle('Track reco. efficiency')
        trackEffVsL.Divide(self.trackEffVsL_reco, self.trackEffVsL_true,1,1,"cl=0.683 b(1,1) mode")
        trackEffVsL.SetMarkerStyle(20)
        trackEffVsL.SetMarkerSize(0.5)
        trackEffVsL.Draw('e')
        c0.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/trackEffVsL_'+fs+'.pdf')

        vtxEffVsL = ROOT.TH1F('vtxEffVsL', 'Vertex reconstruction efficiency', 30, 0., 3000.)
        vtxEffVsL.SetXTitle('#beta c t_{LLP} [mm]')
        vtxEffVsL.SetYTitle('Vertex reco. efficiency')
        vtxEffVsL.Divide(self.vtxEffVsL_reco, self.vtxEffVsL_true,1,1,"cl=0.683 b(1,1) mode")
        vtxEffVsL.SetMarkerStyle(20)
        vtxEffVsL.SetMarkerSize(0.5)
        vtxEffVsL.Draw('e')
        c0.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/vtxEffVsL_'+fs+'.pdf')
		
        vtxEffVsR = ROOT.TH1F('vtxEffVsR', 'Vertex reconstruction efficiency', 30, 0., 3000.)
        vtxEffVsR.SetXTitle('R [mm]')
        vtxEffVsR.SetYTitle('Vertex reco. efficiency')
        vtxEffVsR.Divide(self.vtxEffVsR_reco, self.vtxEffVsR_true,1,1,"cl=0.683 b(1,1) mode")
        vtxEffVsR.SetMarkerStyle(20)
        vtxEffVsR.SetMarkerSize(0.5)
        vtxEffVsR.Draw('e')
        c0.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/vtxEffVsR_'+fs+'.pdf')
		
        # vtxEffVsPt = ROOT.TH1F('vtxEffVsPt', 'Vertex reconstruction efficiency', 50, 0., 130.)
        # vtxEffVsPt.SetXTitle('True p_{T} [GeV]')
        # vtxEffVsPt.SetYTitle('Vertex reco. efficiency')
        # vtxEffVsPt.Divide(self.vtxEffVsPt_reco, self.vtxEffVsPt_true,1,1,"cl=0.683 b(1,1) mode")
        # vtxEffVsPt.SetMarkerStyle(20)
        # vtxEffVsPt.SetMarkerSize(0.5)
        # vtxEffVsPt.Draw('e')
        # c0.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/vtxEffVsPt_'+fs+'.pdf')
		
        # vtxEffVsP = ROOT.TH1F('vtxEffVsP', 'Vertex reconstruction efficiency', 50, 0., 130.)
        # vtxEffVsP.SetXTitle('True p_{T} [GeV]')
        # vtxEffVsP.SetYTitle('Vertex reco. efficiency')
        # vtxEffVsP.Divide(self.vtxEffVsP_reco, self.vtxEffVsP_true,1,1,"cl=0.683 b(1,1) mode")
        # vtxEffVsP.SetMarkerStyle(20)
        # vtxEffVsP.SetMarkerSize(0.5)
        # vtxEffVsP.Draw('e')
        # c0.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/vtxEffVsP_'+fs+'.pdf')

        momTrack = ROOT.TEfficiency(self.momTrack_reco,self.momTrack_true)
        momTrack.SetTitle('Track reconstruction efficiency;True momentum [GeV];Efficiency')
        momTrack.SetMarkerStyle(20)
        momTrack.SetMarkerSize(0.5)
        momTrack.Draw('ap')
        c0.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/momTrack_'+fs+'.pdf')

        ptTrack = ROOT.TEfficiency(self.ptTrack_reco,self.ptTrack_true)
        ptTrack.SetTitle('Track reconstruction efficiency;True p_{T} [GeV];Efficiency')
        ptTrack.SetMarkerStyle(20)
        ptTrack.SetMarkerSize(0.5)
        ptTrack.Draw('ap')
        c0.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/ptTrack_'+fs+'.pdf')

        momLLP = ROOT.TEfficiency(self.momLLP_reco,self.momLLP_true)
        momLLP.SetTitle('Track reconstruction efficiency;True LLP momentum [GeV];Efficiency')
        momLLP.SetMarkerStyle(20)
        momLLP.SetMarkerSize(0.5)
        momLLP.Draw('ap')
        c0.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/momLLP_'+fs+'.pdf')

        thetaTrack = ROOT.TEfficiency(self.thetaTrack_reco,self.thetaTrack_true)
        thetaTrack.SetTitle('Track reconstruction efficiency;True polar angle;Efficiency')
        thetaTrack.SetMarkerStyle(20)
        thetaTrack.SetMarkerSize(0.5)
        thetaTrack.Draw('ap')
        c0.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/thetaTrack_'+fs+'.pdf')
		
        vtxEffVsPt = ROOT.TEfficiency(self.vtxEffVsPt_reco,self.vtxEffVsPt_true)
        vtxEffVsPt.SetTitle('Vtx reco efficiency;True p_{T} [GeV];Efficiency')
        vtxEffVsPt.SetMarkerStyle(20)
        vtxEffVsPt.SetMarkerSize(0.5)
        vtxEffVsPt.Draw('ap')
        c0.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/vtxEffVsPt_'+fs+'.pdf')
		
        vtxEffVsP = ROOT.TEfficiency(self.vtxEffVsP_reco,self.vtxEffVsP_true)
        vtxEffVsP.SetTitle('Vtx reco efficiency;True p [GeV];Efficiency')
        vtxEffVsP.SetMarkerStyle(20)
        vtxEffVsP.SetMarkerSize(0.5)
        vtxEffVsP.Draw('ap')
        c0.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/vtxEffVsP_'+fs+'.pdf')

        '''
        print 'DeltaTheta: ', DeltaThetaTrackLLP_reco.GetEntries(), DeltaThetaTrackLLP_true.GetEntries()
        DeltaThetaTrackLLP = ROOT.TEfficiency(DeltaThetaTrackLLP_reco,DeltaThetaTrackLLP_true)
        print '1'
        DeltaThetaTrackLLP.SetTitle('Track reconstruction efficiency;|#theta_{LLP} - #theta_{track}|;Efficiency')
        print '2'
        DeltaThetaTrackLLP.SetMarkerStyle(20)
        print '3'
        DeltaThetaTrackLLP.SetMarkerSize(0.5)
        print '4'
        #DeltaThetaTrackLLP.Draw('ap')
        print '5'
        #c0.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/DeltaThetaTrackLLP_'+fs+'.pdf')

        print 'DeltaPhi: ', DeltaPhiTrackLLP_reco.GetEntries(), DeltaPhiTrackLLP_true.GetEntries()
        DeltaPhiTrackLLP = ROOT.TEfficiency(DeltaPhiTrackLLP_reco,DeltaPhiTrackLLP_true)
        DeltaPhiTrackLLP.SetTitle('Track reconstruction efficiency;|#phi_{LLP} - #phi_{track}|;Efficiency')
        DeltaPhiTrackLLP.SetMarkerStyle(20)
        DeltaPhiTrackLLP.SetMarkerSize(0.5)
        #DeltaPhiTrackLLP.Draw('ap')
        #c0.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/DeltaPhiTrackLLP_'+fs+'.pdf')

        print 'DeltaAlpha: ', DeltaAlphaTrackLLP_reco.GetEntries(), DeltaAlphaTrackLLP_true.GetEntries()
        '''
        DeltaAlphaTrackLLP = ROOT.TEfficiency(self.DeltaAlphaTrackLLP_reco,self.DeltaAlphaTrackLLP_true)
        DeltaAlphaTrackLLP.SetTitle('Track reconstruction efficiency;|#Delta#alpha_{LLP-track}|;Efficiency')
        DeltaAlphaTrackLLP.SetMarkerStyle(20)
        DeltaAlphaTrackLLP.SetMarkerSize(0.5)
        DeltaAlphaTrackLLP.Draw('ap')
        c0.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/DeltaAlphaTrackLLP_'+fs+'.pdf')
	
        cosOpenAngleVtx = ROOT.TEfficiency(self.cosOpenAngleVtx_reco,self.cosOpenAngleVtx_true)
        cosOpenAngleVtx.SetTitle('Vtx reconstruction efficiency;cos(#Delta#alpha);Efficiency')
        # cosOpenAngleVtx.SetMarkerStyle(20)
        # cosOpenAngleVtx.SetMarkerSize(0.5)
        cosOpenAngleVtx.Draw('ap')
        c0.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/cosOpenAngleVtx_'+fs+'.pdf')
        
        self.trackEffVsR_true.Scale( 1./self.trackEffVsR_true.Integral() )
        self.trackEffVsR_true.Draw('hist')
        c0.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/R_true_'+fs+'.pdf')
        self.trackEffVsR_reco.Draw('hist')
        c0.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/R_reco_'+fs+'.pdf')
        self.momTrack_true.Draw('hist')
        c0.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/momTrack_true_'+fs+'.pdf')
        self.DeltaThetaTrackLLP_true.Draw('hist')
        c0.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/DeltaThetaTrackLLP_true_'+fs+'.pdf')
        self.DeltaThetaTrackLLP_reco.Draw('hist')
        c0.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/DeltaThetaTrackLLP_reco_'+fs+'.pdf')
        self.DeltaPhiTrackLLP_true.Draw('hist')
        c0.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/DeltaPhiTrackLLP_true_'+fs+'.pdf')
        self.DeltaAlphaTrackLLP_true.Draw('hist')
        c0.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/DeltaAlphaTrackLLP_true_'+fs+'.pdf')
        self.h_nTracks.Draw('hist')
        c0.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/nTracks_'+fs+'.pdf')
        self.h_relWeights.Draw('hist')
        c0.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/relWeights_'+fs+'.pdf')
        self.h_angDist.Draw('hist')
        c0.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/angularDistance_'+fs+'.pdf')
        c0.SetLogy()
        self.siTrackD0.Draw('hist')
        c0.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/siTrackD0_'+fs+'.pdf')
        self.siTrackZ0.Draw('hist')
        c0.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/siTrackZ0_'+fs+'.pdf')
        c0.SetLogy(0)

        c0.SetLogy()

        #thetaTrack_true.Scale( 1./thetaTrack_true.Integral() )
        self.thetaTrack_true.Draw('hist')
        c0.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/thetaTrack_true_'+fs+'.pdf')
        self.cosOpenAngleVtx_true.Draw('hist')
        self.cosOpenAngleVtx_true.SetXTitle('cos(#Delta#alpha)')
        c0.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/cosOpenAngleVtx_true_'+fs+'.pdf')
        self.cosOpenAngleVtx_reco.Draw('hist')
        self.cosOpenAngleVtx_reco.SetXTitle('cos(#Delta#alpha)')
        c0.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/cosOpenAngleVtx_reco_'+fs+'.pdf')
        self.vtxMisdistances.Draw('hist')
        self.vtxMisdistances.SetXTitle('#Delta R_{vtx} [mm]')
        c0.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/vtxMisdistance_'+fs+'.pdf')
        self.vtxMultiplicity.Draw('hist')
        self.vtxMultiplicity.SetXTitle('N_{vtx}')
        c0.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/vtxMultiplicity_'+fs+'.pdf')
        self.hitsDistances.Draw('hist')
        self.hitsDistances.SetXTitle('l_{ij} [mm]')
        c0.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/hitsDistances_'+fs+'.pdf')
        self.helixDistances.Draw('hist')
        self.helixDistances.SetXTitle('helix distance [mm]')
        c0.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/helixDistances_'+fs+'.pdf')
        c0.SetLogy(0)
        self.vtxEffVsL_true.SetMinimum(0.1)
        self.vtxEffVsL_true.Draw('hist')
        self.vtxEffVsL_true.SetXTitle('#beta c t_{LLP} [mm]')
        c0.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/vtxEffVsL_true_'+fs+'.pdf')
        self.vtxEffVsL_reco.Draw('hist')
        self.vtxEffVsL_reco.SetXTitle('#beta c t_{LLP} [mm]')
        c0.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/vtxEffVsL_reco_'+fs+'.pdf')
        c0.SetLogy()
        self.vtxVsR_reco.Draw('hist')
        self.vtxVsR_reco.SetXTitle('R [mm]')
        c0.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/vtxVsR_reco_'+fs+'.pdf')
        self.vtxVsL_reco.Draw('hist')
        self.vtxVsL_reco.SetXTitle('L [mm]')
        c0.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/vtxVsL_reco_'+fs+'.pdf')
        self.vtxP.Draw('hist')
        self.vtxP.SetXTitle("p [GeV]")
        c0.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/vtxP_'+fs+'.pdf')
        self.vtxPt.Draw('hist')
        self.vtxPt.SetXTitle("p_{T} [GeV]")
        c0.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/vtxPt_'+fs+'.pdf')
        self.vtxTheta.Draw('hist')
        self.vtxTheta.SetXTitle("Polar angle")
        c0.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/vtxTheta_'+fs+'.pdf')
        self.vtxPhi.Draw('hist')
        self.vtxPhi.SetXTitle("Azimuthal angle")
        c0.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/vtxPhi_'+fs+'.pdf')
        self.vtxTracksPt.Draw('hist')
        self.vtxTracksPt.SetXTitle("p_{T} [GeV]")
        c0.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/vtxTracksPt_'+fs+'.pdf')
        self.vtxTracksPtSum.Draw('hist')
        self.vtxTracksPtSum.SetXTitle("p_{T}^{(1)}+p_{T}^{(2)} [GeV]")
        c0.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/vtxTracksPtSum_'+fs+'.pdf')
        self.vtxTracksP.Draw('hist')
        self.vtxTracksP.SetXTitle("p [GeV]")
        c0.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/vtxTracksP_'+fs+'.pdf')
        self.vtxTracksTheta.Draw('hist')
        self.vtxTracksTheta.SetXTitle("Polar angle")
        c0.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/vtxTracksTheta_'+fs+'.pdf')
        self.vtxTracksPhi.Draw('hist')
        self.vtxTracksPhi.SetXTitle("Azimuthal angle")
        c0.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/vtxTracksPhi_'+fs+'.pdf')
        self.vtxRefPointDist.Draw('hist')
        self.vtxRefPointDist.SetXTitle("#DeltaR(vtx-trackState) [mm]")
        c0.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/vtxRefPointDist_'+fs+'.pdf')
        self.vtxTrksRefPointsDist.Draw('hist')
        self.vtxTrksRefPointsDist.SetXTitle("#DeltaR(vtx-trackState) [mm]")
        c0.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/vtxTrksRefPointsDist_'+fs+'.pdf')
        self.vtxTrksCurvRatio.Draw('hist')
        self.vtxTrksCurvRatio.SetXTitle("|#Omega_{1}|")
        c0.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/vtxTrksCurvRatio'+fs+'.pdf')
        self.vtxTrksOmega.Draw('hist')
        self.vtxTrksOmega.SetXTitle("|#Omega|")
        c0.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/vtxTrksOmega'+fs+'.pdf')
        c0.SetLogx()
        self.vtxTrksRefPointZ.Draw('hist')
        self.vtxTrksRefPointZ.SetXTitle("#Deltaz_{trk} [mm]")
        c0.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/vtxTrksRefPointZ'+fs+'.pdf')
        c0.SetLogx(0)
        self.vtxTrksChi2.Draw('hist')
        self.vtxTrksChi2.SetXTitle("#chi^{2}")
        c0.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/vtxTrksChi2_'+fs+'.pdf')
        self.vtxTrksChi2Ndf.Draw('hist')
        self.vtxTrksChi2Ndf.SetXTitle("#chi^{2} / N_{df}")
        c0.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/vtxTrksChi2Ndf_'+fs+'.pdf')
        self.vtxTrksNdf.Draw('hist')
        self.vtxTrksNdf.SetXTitle("N_{df}")
        c0.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/vtxTrksNdf_'+fs+'.pdf')
        self.vtxTrksD0.Draw('hist')
        self.vtxTrksD0.SetXTitle("d_{0}")
        c0.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/vtxTrksD0_'+fs+'.pdf')
        self.vtxTrksZ0.Draw('hist')
        self.vtxTrksZ0.SetXTitle("z_{0}")
        c0.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/vtxTrksZ0_'+fs+'.pdf')
        self.vtxTrksD0AtIP.Draw('hist')
        self.vtxTrksD0AtIP.SetXTitle("d_{0}")
        c0.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/vtxTrksD0AtIP_'+fs+'.pdf')
        self.vtxTrksZ0AtIP.Draw('hist')
        self.vtxTrksZ0AtIP.SetXTitle("z_{0}")
        c0.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/vtxTrksZ0AtIP_'+fs+'.pdf')
        self.vtxTrksTruePDG.Draw('hist')
        self.vtxTrksTruePDG.SetXTitle("|PDG|")
        c0.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/vtxTrksTruePDG_'+fs+'.pdf')
        self.vtxTrksAreBothCurlers.Draw('hist')
        self.vtxTrksAreBothCurlers.SetXTitle("|PDG|")
        c0.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/vtxTrksAreBothCurlers_'+fs+'.pdf')
        self.vtxTrksCentresDist.Draw('hist')
        self.vtxTrksCentresDist.SetXTitle("d_{C}")
        c0.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/vtxTrksCentresDist_'+fs+'.pdf')
        self.vtxConeP.SetXTitle("p_{cone} [GeV]")
        self.vtxConeP.SetYTitle("Number of vertices")
        self.vtxConeP.Draw('hist')
        c0.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/vtxConeP_'+fs+'.pdf')

        # c1=ROOT.TCanvas('c1', 'c1', 1200, 800)
        c1=ROOT.TCanvas('c1', 'c1', 600, 400)
        c1.SetRightMargin(0.175)
        '''
        trackEffRVsZ = ROOT.TH2F('trackEffRVsZ', 'Track reconstruction efficiency', constants.NBINS, -constants.TPC_Z_MAX, constants.TPC_Z_MAX, constants.NBINS, 0., constants.TPC_R_MAX)
        trackEffRVsZ.SetYTitle('R [mm]')
        trackEffRVsZ.SetXTitle('z [mm]')
        trackEffRVsZ.SetZTitle('Track reco. efficiency')
        trackEffRVsZ.Divide(trackEffRVsZ_reco, trackEffRVsZ_true,1,1,"cl=0.683 b(1,1) mode")
        trackEffRVsZ.SetStats(0)
        '''
        trackEffRVsZ = ROOT.TEfficiency(self.trackEffRVsZ_reco,self.trackEffRVsZ_true)
        trackEffRVsZ.SetTitle('Track reconstruction efficiency;z [mm];R [mm];Efficiency')
        trackEffRVsZ.Draw('colz')
        line1 = ROOT.TLine(-2350.,329.0,2350.0,329.0)
        line2 = ROOT.TLine(-2350.,1808.0,2350.0,1808.0)
        line3 = ROOT.TLine(-2350.,329.0,-2350.0,1808.0)
        line4 = ROOT.TLine(2350.,329.0,2350.0,1808.0)
        line1.SetLineColor(2)
        line2.SetLineColor(2)
        line3.SetLineColor(2)
        line4.SetLineColor(2)
        line1.Draw('same')
        line2.Draw('same')
        line3.Draw('same')
        line4.Draw('same')
        c1.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/trackEffRVsZ_'+fs+'.pdf')

        trackEffiPvsTheta = ROOT.TEfficiency(self.trackEffiPvsTheta_reco,self.trackEffiPvsTheta_true)
        trackEffiPvsTheta.SetTitle('Track reconstruction efficiency;#theta_{track};Momentum;Efficiency')
        trackEffiPvsTheta.Draw('colz')
        line1.Draw('same')
        line2.Draw('same')
        line3.Draw('same')
        line4.Draw('same')
        c1.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/trackEffiPvsTheta_'+fs+'.pdf')

        #vtxEffRVsZ = ROOT.TEfficiency(vtxEffRVsZ_reco,vtxEffRVsZ_true)
        # vtxEffRVsZ = self.vtxEffRVsZ_reco.Clone()
        # vtxEffRVsZ.Divide(self.vtxEffRVsZ_true)
        vtxEffRVsZ = get_2d_eff_plot(self.vtxEffRVsZ_reco,self.vtxEffRVsZ_true, "vtxEffRVsZ")
        vtxEffRVsZ.SetTitle('ILD Simulation;z [mm];R [mm];Efficiency')
        # vtxEffRVsZ.SetMinimum(-0.01)
        vtxEffRVsZ.SetMaximum(1.)
        # vtxEffRVsZ.GetXaxis().SetLabelSize(0.04)
        # vtxEffRVsZ.GetYaxis().SetLabelSize(0.04)
        # vtxEffRVsZ.GetZaxis().SetLabelSize(0.04)
        # vtxEffRVsZ.GetXaxis().SetTitleSize(0.04)
        # vtxEffRVsZ.GetYaxis().SetTitleSize(0.04)
        # vtxEffRVsZ.GetZaxis().SetTitleSize(0.04)
        vtxEffRVsZ.Draw('colz')
        line1.Draw('same')
        line2.Draw('same')
        line3.Draw('same')
        line4.Draw('same')
        '''
        ROOT.gPad.Update()
        graph = vtxEffRVsZ.GetPaintedGraph()
        graph.SetMinimum(0)
        graph.SetMaximum(1)
        ROOT.gPad.Update()
        '''
        c1.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/vtxEffRVsZ_'+fs+'.pdf')

        self.vtxEffRVsZ_true.SetYTitle('R [mm]')
        self.vtxEffRVsZ_true.SetXTitle('z [mm]')
        self.vtxEffRVsZ_true.SetZTitle('Number of vertices')
        self.vtxEffRVsZ_true.SetStats(0)
        self.vtxEffRVsZ_true.Draw('colz')
        line1.Draw('same')
        line2.Draw('same')
        line3.Draw('same')
        line4.Draw('same')
        c1.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/vtxEffRVsZ_true_'+fs+'.pdf')

        self.vtxPt1vsPt2.SetYTitle('p_{T}^{2} [GeV]')
        self.vtxPt1vsPt2.SetXTitle('p_{T}^{1} [GeV]')
        self.vtxPt1vsPt2.SetZTitle('Number of vertices')
        self.vtxPt1vsPt2.SetStats(0)
        self.vtxPt1vsPt2.Draw('colz')
        c1.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/vtxPt1vsPt2_'+fs+'.pdf')

        self.vtxP1vsP2.SetYTitle('p^{(2)} [GeV]')
        self.vtxP1vsP2.SetXTitle('p^{(1)} [GeV]')
        self.vtxP1vsP2.SetZTitle('Number of vertices')
        self.vtxP1vsP2.SetStats(0)
        self.vtxP1vsP2.Draw('colz')
        c1.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/vtxP1vsP2_'+fs+'.pdf')

        self.vtxPz1vsPz2.SetYTitle('p_{z}^{(2)} [GeV]')
        self.vtxPz1vsPz2.SetXTitle('p_{z}^{(1)} [GeV]')
        self.vtxPz1vsPz2.SetZTitle('Number of vertices')
        self.vtxPz1vsPz2.SetStats(0)
        self.vtxPz1vsPz2.Draw('colz')
        c1.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/vtxPz1vsPz2_'+fs+'.pdf')

        self.vtxOmega1vsOmega2.SetYTitle('#Omega_{2}')
        self.vtxOmega1vsOmega2.SetXTitle('#Omega_{1}')
        self.vtxOmega1vsOmega2.SetZTitle('Number of vertices')
        self.vtxOmega1vsOmega2.SetStats(0)
        self.vtxOmega1vsOmega2.Draw('colz')
        c1.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/vtxOmega1vsOmega2_'+fs+'.pdf')

        self.vtxRefPointDist1VsDist2.SetYTitle('d_{2}')
        self.vtxRefPointDist1VsDist2.SetXTitle('d_{1}')
        self.vtxRefPointDist1VsDist2.SetZTitle('Number of vertices')
        self.vtxRefPointDist1VsDist2.SetStats(0)
        self.vtxRefPointDist1VsDist2.Draw('colz')
        c1.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/vtxRefPointDist1VsDist2_'+fs+'.pdf')

        self.vtxTrksNdf1VsNdf2.SetYTitle('N_{df}^{(2)}')
        self.vtxTrksNdf1VsNdf2.SetXTitle('N_{df}^{(1)}')
        self.vtxTrksNdf1VsNdf2.SetZTitle('Number of vertices')
        self.vtxTrksNdf1VsNdf2.SetStats(0)
        self.vtxTrksNdf1VsNdf2.Draw('colz')
        c1.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/vtxTrksNdf1VsNdf2_'+fs+'.pdf')

        self.vtxTrksPtVsNdf.SetYTitle('N_{df}')
        self.vtxTrksPtVsNdf.SetXTitle('p_{T} [GeV]')
        self.vtxTrksPtVsNdf.SetZTitle('Number of tracks')
        self.vtxTrksPtVsNdf.SetStats(0)
        self.vtxTrksPtVsNdf.Draw('colz')
        c1.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/vtxTrksPtVsNdf_'+fs+'.pdf')

        self.vtxTrksD01VsD02.SetYTitle('d_{0}^{(2)}')
        self.vtxTrksD01VsD02.SetXTitle('d_{0}^{(1)}')
        self.vtxTrksD01VsD02.SetZTitle('Number of vertices')
        self.vtxTrksD01VsD02.SetStats(0)
        self.vtxTrksD01VsD02.Draw('colz')
        c1.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/vtxTrksD01VsD02_'+fs+'.pdf')

        self.vtxTrksZ01VsZ02.SetYTitle('z_{0}^{(2)}')
        self.vtxTrksZ01VsZ02.SetXTitle('z_{0}^{(1)}')
        self.vtxTrksZ01VsZ02.SetZTitle('Number of vertices')
        self.vtxTrksZ01VsZ02.SetStats(0)
        self.vtxTrksZ01VsZ02.Draw('colz')
        c1.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/vtxTrksZ01VsZ02_'+fs+'.pdf')

        c1.SetLogx()
        self.vtxTrksCentresRefPointsDist_scaled.SetYTitle('d_{C}/#sqrt{p_{T}^{1} p_{T}^{2}}')
        self.vtxTrksCentresRefPointsDist_scaled.SetXTitle('d_{ref}')
        self.vtxTrksCentresRefPointsDist_scaled.SetZTitle('Number of vertices')
        self.vtxTrksCentresRefPointsDist_scaled.SetStats(0)
        self.vtxTrksCentresRefPointsDist_scaled.Draw('colz')
        c1.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/vtxTrksCentresRefPointsDist_scaled_'+fs+'.pdf')

        self.vtxTrksCentresRefPointsDist.SetYTitle('d_{C}')
        self.vtxTrksCentresRefPointsDist.SetXTitle('d_{ref}')
        self.vtxTrksCentresRefPointsDist.SetZTitle('Number of vertices')
        self.vtxTrksCentresRefPointsDist.SetStats(0)
        self.vtxTrksCentresRefPointsDist.Draw('colz')
        c1.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/vtxTrksCentresRefPointsDist_'+fs+'.pdf')

        self.vtxRefPointDistsVsCentres.SetYTitle('d_{C}')
        self.vtxRefPointDistsVsCentres.SetXTitle('d_{ref-vtx}')
        self.vtxRefPointDistsVsCentres.SetZTitle('Number of tracks')
        self.vtxRefPointDistsVsCentres.SetStats(0)
        self.vtxRefPointDistsVsCentres.Draw('colz')
        c1.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/vtxRefPointDistsVsCentres_'+fs+'.pdf')
        c1.SetLogx(0)
        # print vtxTrksCentresRefPointsDist.Integral()

        self.corrCentresRefDistsVsPt.SetYTitle('p_{T}^{vtx}')
        self.corrCentresRefDistsVsPt.SetXTitle('2.2d_{ref} - d_{C}')
        self.corrCentresRefDistsVsPt.SetZTitle('Number of vertices')
        self.corrCentresRefDistsVsPt.SetStats(0)
        self.corrCentresRefDistsVsPt.Draw('colz')
        c1.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/corrCentresRefDistsVsPt_'+fs+'.pdf')
        # print 'pT vs. dd integral:', centresRefDistsVsPtEv
		
        c1.SetLogy()
        self.corrCentresRefDistsVsPtLog.SetYTitle('p_{T}^{vtx}')
        self.corrCentresRefDistsVsPtLog.SetXTitle('2.2d_{ref} - d_{C}')
        self.corrCentresRefDistsVsPtLog.SetZTitle('Number of vertices')
        self.corrCentresRefDistsVsPtLog.SetStats(0)
        self.corrCentresRefDistsVsPtLog.Draw('colz')
        c1.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/corrCentresRefDistsVsPtLog_'+fs+'.pdf')
        c1.SetLogy(0)

        self.corrLogCentresRefDistsVsPt.SetYTitle('p_{T}^{vtx}')
        self.corrLogCentresRefDistsVsPt.SetXTitle('300log_{10}(d_{ref}) - d_{C}')
        self.corrLogCentresRefDistsVsPt.SetZTitle('Number of vertices')
        self.corrLogCentresRefDistsVsPt.SetStats(0)
        self.corrLogCentresRefDistsVsPt.Draw('colz')
        c1.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/corrLogCentresRefDistsVsPt_'+fs+'.pdf')

        self.corrCentresRefDistsVsR.SetYTitle('R_{vtx}')
        self.corrCentresRefDistsVsR.SetXTitle('2.2d_{ref} - d_{C}')
        self.corrCentresRefDistsVsR.SetZTitle('Number of vertices')
        self.corrCentresRefDistsVsR.SetStats(0)
        self.corrCentresRefDistsVsR.Draw('colz')
        c1.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/corrCentresRefDistsVsR_'+fs+'.pdf')
        # print 'R vs. dd integral:', corrCentresRefDistsVsR.Integral()

        self.cosOpenAngleVsCurvRatio.SetXTitle('cos(#Delta#alpha)')
        self.cosOpenAngleVsCurvRatio.SetYTitle('|#Omega_{1}/#Omega_{2}|')
        self.cosOpenAngleVsCurvRatio.SetZTitle('Number of vertices')
        self.cosOpenAngleVsCurvRatio.SetStats(0)
        self.cosOpenAngleVsCurvRatio.Draw('colz')
        c1.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/cosOpenAngleVsCurvRatio_'+fs+'.pdf')
		
        self.cosOpenAngleVsRefPtDist_true.SetXTitle('cos(#Delta#alpha)')
        self.cosOpenAngleVsRefPtDist_true.SetYTitle('d_{ref1-ref2}')
        self.cosOpenAngleVsRefPtDist_true.SetZTitle('Number of vertices')
        self.cosOpenAngleVsRefPtDist_true.SetStats(0)
        self.cosOpenAngleVsRefPtDist_true.Draw('colz')
        c1.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/cosOpenAngleVsRefPtDist_true_'+fs+'.pdf')
		
        self.cosOpenAngleVsRefPtDist_reco.SetXTitle('cos(#Delta#alpha)')
        self.cosOpenAngleVsRefPtDist_reco.SetYTitle('d_{ref1-ref2}')
        self.cosOpenAngleVsRefPtDist_reco.SetZTitle('Number of vertices')
        self.cosOpenAngleVsRefPtDist_reco.SetStats(0)
        self.cosOpenAngleVsRefPtDist_reco.Draw('colz')
        c1.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/cosOpenAngleVsRefPtDist_reco_'+fs+'.pdf')

        self.vtxRefPhiVsLhPhi.SetXTitle('q_{1} #phi^{(1)}_{ref}/#phi^{(1)}_{arc}')
        self.vtxRefPhiVsLhPhi.SetYTitle('q_{2} #phi^{(2)}_{ref}/#phi^{(2)}_{arc}')
        self.vtxRefPhiVsLhPhi.SetZTitle('Number of tracks')
        self.vtxRefPhiVsLhPhi.SetStats(0)
        self.vtxRefPhiVsLhPhi.Draw('colz')
        c1.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/vtxRefPhiVsLhPhi_'+fs+'.pdf')

        self.vtxRefPhiVsArcPhi.SetXTitle('#phi_{ref}/#phi_{arc}')
        self.vtxRefPhiVsArcPhi.SetYTitle('#phi_{arc}')
        self.vtxRefPhiVsArcPhi.SetZTitle('Number of tracks')
        self.vtxRefPhiVsArcPhi.SetStats(0)
        self.vtxRefPhiVsArcPhi.Draw('colz')
        c1.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/vtxRefPhiVsArcPhi_'+fs+'.pdf')

        self.vtxRefZVsLhZ.SetXTitle('sgn(p_{z})(z_{ref}-z_{vtx})/|z_{ref}-z_{lh}|')
        self.vtxRefZVsLhZ.SetYTitle('sgn(p_{z})(z_{lh}-z_{vtx})/|z_{ref}-z_{lh}|')
        self.vtxRefZVsLhZ.SetZTitle('Number of tracks')
        self.vtxRefZVsLhZ.SetStats(0)
        self.vtxRefZVsLhZ.Draw('colz')
        c1.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/vtxRefZVsLhZ_'+fs+'.pdf')

        c1.SetLogy()
        self.vtxRefZVsLenZ.SetXTitle('sgn(p_{z})(z_{ref}-z_{vtx})/|z_{ref}-z_{lh}|')
        self.vtxRefZVsLenZ.SetYTitle('|z_{ref}-z_{lh}|')
        self.vtxRefZVsLenZ.SetZTitle('Number of tracks')
        self.vtxRefZVsLenZ.SetStats(0)
        self.vtxRefZVsLenZ.Draw('colz')
        c1.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/vtxRefZVsLenZ_'+fs+'.pdf')
        c1.SetLogy(0)

        self.tracksVtxPvsTheta.SetYTitle('p [GeV]')
        self.tracksVtxPvsTheta.SetXTitle('#theta_{track}')
        self.tracksVtxPvsTheta.SetZTitle('Number of tracks')
        self.tracksVtxPvsTheta.SetStats(0)
        #tracksVtxPvsTheta.Scale( 1./tracksVtxPvsTheta.Integral() )
        self.tracksVtxPvsTheta.Draw('colz text')
        c1.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/tracksVtxPvsTheta_'+fs+'.pdf')

        self.tracksVtxPtVsTheta.SetYTitle('p [GeV]')
        self.tracksVtxPtVsTheta.SetXTitle('#theta_{track}')
        self.tracksVtxPtVsTheta.SetZTitle('Number of tracks')
        self.tracksVtxPtVsTheta.SetStats(0)
        self.tracksVtxPtVsTheta.Draw('colz text')
        c1.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/tracksVtxPtVsTheta_'+fs+'.pdf')


        self.trackEffRVsZ_true.SetYTitle('R [mm]')
        self.trackEffRVsZ_true.SetXTitle('z [mm]')
        self.trackEffRVsZ_true.SetZTitle('Number of vertices')
        self.trackEffRVsZ_true.SetStats(0)
        self.trackEffRVsZ_true.Draw('colz')
        line1.Draw('same')
        line2.Draw('same')
        line3.Draw('same')
        line4.Draw('same')
        c1.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/trueVerticesRVsZ_'+fs+'.pdf')

        self.recoVertices.SetYTitle('R [mm]')
        self.recoVertices.SetXTitle('z [mm]')
        self.recoVertices.SetZTitle('Number of vertices')
        self.recoVertices.SetStats(0)
        self.recoVertices.Draw('colz')
        line1.Draw('same')
        line2.Draw('same')
        line3.Draw('same')
        line4.Draw('same')
        c1.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/recoVerticesRVsZ_'+fs+'.pdf')

        self.fakeVertices.SetYTitle('R [mm]')
        self.fakeVertices.SetXTitle('z [mm]')
        self.fakeVertices.SetZTitle('Number of vertices')
        self.fakeVertices.SetStats(0)
        self.fakeVertices.Draw('colz')
        line1.Draw('same')
        line2.Draw('same')
        line3.Draw('same')
        line4.Draw('same')
        c1.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/fakeVerticesRVsZ_'+fs+'.pdf')

        self.trackEffiPvsTheta_true.SetYTitle('p [GeV]')
        self.trackEffiPvsTheta_true.SetXTitle('#theta_{track}')
        self.trackEffiPvsTheta_true.SetZTitle('Number of tracks')
        self.trackEffiPvsTheta_true.SetStats(0)
        #self.trackEffiPvsTheta_true.Scale( 1./trackEffiPvsTheta_true.Integral() )
        self.trackEffiPvsTheta_true.Draw('colz')
        line1.Draw('same')
        line2.Draw('same')
        line3.Draw('same')
        line4.Draw('same')
        c1.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/trackEffiPvsTheta_true_'+fs+'.pdf')

        self.trackEffiPvsTheta_reco.SetYTitle('p [GeV]')
        self.trackEffiPvsTheta_reco.SetXTitle('#theta_{track}')
        self.trackEffiPvsTheta_reco.SetZTitle('Number of tracks')
        self.trackEffiPvsTheta_reco.SetStats(0)
        #trackEffiPvsTheta_reco.Scale( 1./trackEffiPvsTheta_reco.Integral() )
        self.trackEffiPvsTheta_reco.Draw('colz')
        line1.Draw('same')
        line2.Draw('same')
        line3.Draw('same')
        line4.Draw('same')
        c1.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/trackEffiPvsTheta_reco_'+fs+'.pdf')

        self.trackEffiPvsR_true.SetYTitle('R [mm]')
        self.trackEffiPvsR_true.SetXTitle('p [GeV]')
        self.trackEffiPvsR_true.SetZTitle('Number of tracks')
        self.trackEffiPvsR_true.SetStats(0)
        self.trackEffiPvsR_true.Draw('colz')
        c1.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/trackEffiPvsR_true_'+fs+'.pdf')

        self.d12vsTheta_true.SetYTitle('d_{12} [mm]')
        self.d12vsTheta_true.SetXTitle('Track polar angle (truth)')
        self.d12vsTheta_true.SetZTitle('Number of tracks')
        self.d12vsTheta_true.SetStats(0)
        self.d12vsTheta_true.Draw('colz')
        c1.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/d12vsTheta_true_'+fs+'.pdf')

        self.d12vsTheta_reco.SetYTitle('d_{12} [mm]')
        self.d12vsTheta_reco.SetXTitle('Track polar angle')
        self.d12vsTheta_reco.SetZTitle('Number of tracks')
        self.d12vsTheta_reco.SetStats(0)
        self.d12vsTheta_reco.Draw('colz')
        c1.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/d12vsTheta_reco_'+fs+'.pdf')

        self.d12vsDeltaPhi_true.SetYTitle('d_{12} [mm]')
        self.d12vsDeltaPhi_true.SetXTitle('|#phi_{LLP} - #phi_{track}|')
        self.d12vsDeltaPhi_true.SetZTitle('Number of tracks')
        self.d12vsDeltaPhi_true.SetStats(0)
        self.d12vsDeltaPhi_true.Draw('colz')
        c1.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/d12vsDeltaPhi_true_'+fs+'.pdf')
		
        self.vtxIso.SetYTitle('p_{cone} [GeV]')
        self.vtxIso.SetXTitle('p_{vtx}')
        self.vtxIso.SetZTitle('Number of vertices')
        self.vtxIso.SetStats(0)
        self.vtxIso.Draw('colz')
        c1.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/vtxIso.pdf')
		
        self.lambda_hypo_mass.SetYTitle('pion-proton hypot. M_{inv} [GeV]')
        self.lambda_hypo_mass.SetXTitle('proton-pion hypot. M_{inv} [GeV]')
        self.lambda_hypo_mass.SetZTitle('Number of vertices')
        self.lambda_hypo_mass.SetStats(0)
        self.lambda_hypo_mass.Draw('colz')
        c1.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/lambda_hypo_mass'+fs+'.pdf')
		
        self.ee_mass_vs_R.SetXTitle('e^{+}e^{-} hypot. M_{inv} [GeV]')
        self.ee_mass_vs_R.SetYTitle('vtx. radius [mm]')
        self.ee_mass_vs_R.SetZTitle('Number of vertices')
        self.ee_mass_vs_R.SetStats(0)
        self.ee_mass_vs_R.Draw('colz')
        c1.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/ee_mass_vs_R.pdf')

        self.pipi_mass_vs_R.SetXTitle('#pi^{+}#pi^{-} hypot. M_{inv} [GeV]')
        self.pipi_mass_vs_R.SetYTitle('vtx. radius [mm]')
        self.pipi_mass_vs_R.SetZTitle('Number of vertices')
        self.pipi_mass_vs_R.SetStats(0)
        self.pipi_mass_vs_R.Draw('colz')
        c1.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/pipi_mass_vs_R.pdf')
		
        self.ee_hypo_mass.SetYTitle('Number of vertices')
        self.ee_hypo_mass.SetXTitle('M_{inv} [GeV]')
        self.ee_hypo_mass.SetStats(0)
        self.ee_hypo_mass.Draw('colz')
        c1.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/ee_hypo_mass'+fs+'.pdf')
		
        self.pipi_hypo_mass.SetYTitle('Number of vertices')
        self.pipi_hypo_mass.SetXTitle('M_{inv} [GeV]')
        self.pipi_hypo_mass.SetStats(0)
        self.pipi_hypo_mass.Draw('colz')
        c1.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/pipi_hypo_mass'+fs+'.pdf')
		
        self.lambda_mass_diff.SetYTitle('Number of vertices')
        self.lambda_mass_diff.SetXTitle('min(|M_{inv}^{p\pi}-m_{\Lambda^{0}}|,|M_{inv}^{\pi p}-m_{\Lambda^{0}}|) [GeV]')
        self.lambda_mass_diff.SetStats(0)
        self.lambda_mass_diff.Draw('colz')
        c1.SaveAs('plots/'+cat+'/'+fs+'/'+scenario+'/lambda_mass_diff'+fs+'.pdf')
		

        
        histo_array = []
        histo_array.append(trackEffVsL)
        histo_array.append(trackEffVsR)
        histo_array.append(vtxEffRVsZ)
        histo_array.append(ptTrack)
        histo_array.append(thetaTrack)
        histo_array.append(vtxEffVsR)
        histo_array.append(vtxEffVsL)
        histo_array.append(vtxEffVsPt)
        histo_array.append(vtxEffVsP)
        #histo_array.append(self.DeltaAlphaTrackLLP)
        #histo_array.append(self.DeltaThetaTrackLLP)
        #histo_array.append(self.DeltaPhiTrackLLP)
        histo_array.append(self.vtxEffVsR_reco)
        histo_array.append(self.vtxMisdistances)
        histo_array.append(self.vtxVsL_reco)
        histo_array.append(self.vtxVsR_reco)
        histo_array.append(self.recoVertices)
        histo_array.append(self.vtxP)
        histo_array.append(self.vtxPt)
        histo_array.append(self.vtxTheta)
        histo_array.append(self.vtxPhi)
        histo_array.append(self.vtxTracksPt)
        histo_array.append(self.vtxTracksP)
        histo_array.append(self.vtxTracksTheta)
        histo_array.append(self.vtxTracksPhi)
        histo_array.append(self.vtxRefPointDist)
        histo_array.append(self.vtxTrksCentresRefPointsDist)
        histo_array.append(self.vtxTrksRefPointsDist)
        histo_array.append(self.vtxTrksCurvRatio)
        histo_array.append(self.cosOpenAngleVtx_true)
        histo_array.append(self.cosOpenAngleVtx_reco)
        histo_array.append(self.vtxTrksChi2)
        histo_array.append(self.vtxTrksChi2Ndf)
        histo_array.append(self.vtxTrksNdf)
        histo_array.append(self.vtxTrksD0AtIP)
        histo_array.append(self.vtxTrksZ0AtIP)
        histo_array.append(self.vtxTrksLogCentresRefDists)
        histo_array.append(self.corrCentresRefDistsVsR)
        histo_array.append(self.corrCentresRefDistsVsPt)
        histo_array.append(self.corrCentresRefDistsVsPtLog)
        histo_array.append(self.corrLogCentresRefDistsVsPt)
        histo_array.append(self.vtxIso)
        histo_array.append(self.vtxConeP)
        histo_array.append(self.ee_hypo_mass)
        histo_array.append(self.pipi_hypo_mass)
        histo_array.append(self.lambda_mass_diff)
        histo_array.append(self.lambda_hypo_mass)
        histo_array.append(self.ee_mass_vs_R)
        histo_array.append(self.pipi_mass_vs_R)

        return histo_array
    
def get_2d_eff_plot(h_reco, h_true, name):
	effhist = ROOT.TH2F()
	effhist = h_reco.Clone(name)
	effhist.Divide(h_true)
	for k in range(effhist.GetNbinsX()):
		for l in range(effhist.GetNbinsY()):
			binnum = effhist.GetBin(k+1, l+1)
			nchit = h_reco.GetBinContent(binnum)
			nc = h_true.GetBinContent(binnum)
			if nchit == 0 and nc != 0:
				effhist.SetBinContent(binnum, 1e-6)  # small number instead of 0
	return effhist